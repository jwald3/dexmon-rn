{"version":3,"sources":["typescript/functions.tsx","components/PokedexItem.tsx","components/Header.tsx","screens/Home.tsx","components/FlavorTextBox.tsx","components/EvolutionChainItem.tsx","components/EvolutionChain.tsx","components/BarChartWrapper.tsx","components/GridItem.tsx","components/GridRow.tsx","screens/PokemonScreen.tsx","screens/PokemonSearch.tsx","App.tsx"],"names":["capitalize","stringVal","charAt","toUpperCase","substring","styles","EStyleSheet","create","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","borderBottomWidth","borderBottomColor","borderBottomStyle","marginHorizontal","circle","height","width","borderRadius","borderWidth","borderColor","backgroundColor","pokemonImage","pokemonName","fontSize","fontWeight","color","marginLeft","arrow","PokedexItem","pokemon","navigation","useNavigation","onPress","navigate","View","style","Image","source","uri","image_url","Text","name","size","paddingTop","display","backButtonContainer","backButtonText","flex","backText","title","searchButtonContainer","marginRight","searchIcon","paddingLeft","Header","props","StatusBar","barStyle","showBackButton","TouchableOpacity","Home","showSearchButton","Search","useState","currentPage","setCurrentPage","isLoading","setIsLoading","updatedPokemonList","setUpdatedPokemonList","useEffect","fetchData","updatedList","axios","get","data","results","map","res","url","sprites","front_default","types","stats","official_art","id","weight","concat","Promise","all","FlatList","initialNumToRender","renderItem","item","keyExtractor","String","ListFooterComponent","loader","ActivityIndicator","onEndReached","onEndReachedThreshold","removeClippedSubviews","maxToRenderPerBatch","marginVertical","FlavorTextBox","text","mainContainer","headerContainer","headerText","containerBody","containerText","split","join","replace","textAlign","EvolutionChainItem","imageUrl","setImageUrl","screenWidth","Dimensions","useLayoutEffect","then","minWidth","Math","min","push","image","imageCaption","padding","EvolutionChain","chain","useMemo","level","flattenChain","flatMap","evolution","evolves_to","index","nextItem","chainItemWrapper","species","orText","horizontal","showsHorizontalScrollIndicator","overflow","borderTopWidth","borderRightWidth","transform","rotate","BarChart","maxX","statAbbrevs","hp","attack","defense","speed","statColors","chartContainer","chartTitleContainer","chartTitleText","chartBody","stat","chartRowContainer","chartStatLabelContainer","chartStatLabelText","m","chartRowBody","value","textOnBar","textBesideBar","paddingBottom","borderTopColor","paddingRight","position","right","top","bottom","GridItem","category","gridRowMaxWidth","Platform","OS","max","maxWidth","bodyText","GridRow","contentContainerStyle","scrollView","classification","genus","type","webViewContainer","webGaps","header","subtitleText","imageContainer","alignSelf","marginTop","innerCircle","left","boxShadow","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","body","typesContainer","subtitle","marginBottom","margin","componentWrapper","JustNamePokemonScreen","useRoute","params","updatedPokemon","setUpdatedPokemon","fullPokemonObj","setFullPokemonObj","updatedPoke","updatePoke","genera","flavor_text","flavor_text_entries","evolution_chain","filteredClassification","filter","language","filteredText","newPoke","resizeMode","minHeight","base_stat","PokemonSearch","pokeData","allPokemon","filteredPokemon","setFilteredPokemon","searchQuery","setSearchQuery","messageText","setMessageText","textInputRef","useRef","length","poke","pkmn","toLowerCase","includes","TouchableWithoutFeedback","current","isFocused","Keyboard","dismiss","subHeaderContainer","TextInput","ref","placeholder","keyboardType","onChangeText","val","searchTextInput","messageTextContainer","Stack","createNativeStackNavigator","App","NavigationContainer","Navigator","Screen","component","options","headerShown","build","$mainAccent","$mainDark","$mainText"],"mappings":"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","file":"static/js/app.231f8a75.chunk.js","sourcesContent":["export const capitalize = (stringVal: string) => {\r\n    return stringVal.charAt(0).toUpperCase() + stringVal.substring(1);\r\n};\r\n","import React from \"react\";\r\nimport { View, Image, Text } from \"react-native\";\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport { UpdatedPokemonResponse } from \"../screens/Home\";\r\nimport { ChevronRightIcon } from \"react-native-heroicons/outline\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\nimport { capitalize } from \"../typescript/functions\";\r\nimport EStyleSheet from \"react-native-extended-stylesheet\";\r\n\r\ninterface PokedexItemProps {\r\n    pokemon: UpdatedPokemonResponse;\r\n}\r\n\r\nexport interface PokemonResponse {\r\n    name: string;\r\n}\r\n\r\nexport type RootStackParamList = {\r\n    Poke: {\r\n        pokemon: PokemonResponse;\r\n    };\r\n};\r\n\r\nfunction PokedexItem({ pokemon }: PokedexItemProps) {\r\n    const navigation =\r\n        useNavigation<NativeStackNavigationProp<RootStackParamList, \"Poke\">>();\r\n\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={() => navigation.navigate(\"Poke\", { pokemon })}\r\n        >\r\n            <View style={styles.container}>\r\n                <View style={styles.circle}>\r\n                    <Image\r\n                        style={styles.pokemonImage}\r\n                        source={{ uri: pokemon.image_url }}\r\n                    />\r\n                </View>\r\n                <Text style={styles.pokemonName}>\r\n                    {capitalize(pokemon.name)}\r\n                </Text>\r\n                <View style={styles.arrow}>\r\n                    <ChevronRightIcon size={28} color=\"#fff\" />\r\n                </View>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n}\r\n\r\nconst styles = EStyleSheet.create({\r\n    container: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        paddingVertical: 20,\r\n        paddingHorizontal: 10,\r\n        borderBottomWidth: 1,\r\n        borderBottomColor: \"$mainAccent\",\r\n        borderBottomStyle: \"solid\",\r\n        marginHorizontal: 10,\r\n    },\r\n    circle: {\r\n        height: 100,\r\n        width: 100,\r\n        borderRadius: 50,\r\n        borderWidth: 2,\r\n        borderColor: \"$mainText\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        backgroundColor: \"rgba(255, 255, 255, 0.8)\", // add this line\r\n    },\r\n    pokemonImage: {\r\n        height: 96,\r\n        width: 96,\r\n    },\r\n    pokemonName: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n        color: \"$mainText\",\r\n        marginLeft: 20,\r\n    },\r\n    arrow: {\r\n        marginLeft: \"auto\",\r\n    },\r\n});\r\n\r\nexport default PokedexItem;\r\n","import React from \"react\";\r\nimport { View, Text, TouchableOpacity, StatusBar } from \"react-native\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\nimport {\r\n    ChevronLeftIcon,\r\n    MagnifyingGlassIcon,\r\n} from \"react-native-heroicons/outline\";\r\nimport EStyleSheet from \"react-native-extended-stylesheet\";\r\n\r\ninterface HeaderProps {\r\n    title: string;\r\n    showBackButton: boolean;\r\n    showSearchButton: boolean;\r\n}\r\n\r\nexport type RootStackParamList = {\r\n    Home: {\r\n        Home: string;\r\n    };\r\n    Search: {\r\n        Search: string;\r\n    };\r\n};\r\n\r\nconst Header: React.FC<HeaderProps> = (props) => {\r\n    const navigation =\r\n        useNavigation<NativeStackNavigationProp<RootStackParamList, \"Home\">>();\r\n\r\n    return (\r\n        <View>\r\n            <StatusBar barStyle=\"light-content\" />\r\n            <View style={styles.container}>\r\n                {props.showBackButton ? (\r\n                    <TouchableOpacity\r\n                        style={styles.backButtonContainer}\r\n                        onPress={() =>\r\n                            navigation.navigate(\"Home\", { Home: \"\" })\r\n                        }\r\n                    >\r\n                        <View style={styles.backButtonText}>\r\n                            <ChevronLeftIcon size={28} color=\"#fff\" />\r\n                            <Text style={styles.backText}>Back</Text>\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                ) : (\r\n                    <View style={styles.backButtonContainer}></View>\r\n                )}\r\n                <Text style={styles.title}>{props.title}</Text>\r\n                {props.showSearchButton ? (\r\n                    <TouchableOpacity\r\n                        style={styles.searchButtonContainer}\r\n                        onPress={() =>\r\n                            navigation.navigate(\"Search\", { Search: \"\" })\r\n                        }\r\n                    >\r\n                        <MagnifyingGlassIcon\r\n                            size={24}\r\n                            color=\"#fff\"\r\n                            style={styles.searchIcon}\r\n                        />\r\n                    </TouchableOpacity>\r\n                ) : (\r\n                    <View style={styles.searchButtonContainer}></View>\r\n                )}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = EStyleSheet.create({\r\n    container: {\r\n        backgroundColor: \"#42AD4A\",\r\n        height: 100,\r\n        paddingTop: 40,\r\n        color: \"$mainText\",\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    backButtonContainer: {\r\n        width: 50,\r\n        marginLeft: 20,\r\n    },\r\n    backButtonText: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-start\",\r\n        flex: 3,\r\n    },\r\n    backText: {\r\n        color: \"$mainText\",\r\n        fontSize: 16,\r\n    },\r\n    title: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: \"$mainText\",\r\n        fontSize: 20,\r\n    },\r\n    searchButtonContainer: {\r\n        width: 50,\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-end\",\r\n        marginRight: 20,\r\n    },\r\n    searchIcon: {\r\n        paddingLeft: \"auto\",\r\n    },\r\n});\r\n\r\nexport default Header;\r\n","import { View, FlatList, ActivityIndicator } from \"react-native\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport PokedexItem from \"../components/PokedexItem\";\r\nimport Header from \"../components/Header\";\r\nimport EStyleSheet from \"react-native-extended-stylesheet\";\r\n\r\ntype BasePokemonResponse = {\r\n    name: string;\r\n    url: string;\r\n};\r\n\r\nexport type UpdatedPokemonResponse = {\r\n    name: string;\r\n    url: string;\r\n    image_url: string;\r\n    id: number;\r\n    types: [\r\n        {\r\n            type: {\r\n                name: string;\r\n                url: string;\r\n            };\r\n        }\r\n    ];\r\n    stats: [\r\n        {\r\n            base_stat: number;\r\n            stat: {\r\n                name: string;\r\n                url: string;\r\n            };\r\n        }\r\n    ];\r\n    official_art: string;\r\n    height: number;\r\n    weight: number;\r\n};\r\n\r\ntype RenderPokemon = {\r\n    item: UpdatedPokemonResponse;\r\n};\r\n\r\nconst Home = () => {\r\n    const [currentPage, setCurrentPage] = useState(0);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [updatedPokemonList, setUpdatedPokemonList] = useState<\r\n        Array<UpdatedPokemonResponse>\r\n    >([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            // Use the page value to set the offset and limit query parameters\r\n            const response = await axios.get(\r\n                `https://pokeapi.co/api/v2/pokemon?offset=${\r\n                    currentPage * 20\r\n                }&limit=20`\r\n            );\r\n\r\n            const updatedList = response.data.results.map(\r\n                async (pokemon: BasePokemonResponse) => {\r\n                    // Make an API call to the pokemon's url\r\n                    const res = await axios.get(pokemon.url);\r\n\r\n                    return {\r\n                        name: pokemon.name,\r\n                        url: pokemon.url,\r\n                        image_url: res.data.sprites.front_default,\r\n                        types: res.data.types,\r\n                        stats: res.data.stats,\r\n                        official_art:\r\n                            res.data.sprites[\"other\"][\"official-artwork\"]\r\n                                .front_default,\r\n                        id: res.data.id,\r\n                        height: res.data.height,\r\n                        weight: res.data.weight,\r\n                    };\r\n                }\r\n            );\r\n\r\n            // Append the new data to the existing data in the updatedPokemonList state\r\n            setUpdatedPokemonList(\r\n                updatedPokemonList.concat(await Promise.all(updatedList))\r\n            );\r\n        };\r\n        setIsLoading(true);\r\n        fetchData();\r\n        setIsLoading(false);\r\n    }, [currentPage]);\r\n\r\n    const loadMoreItems = () => {\r\n        setCurrentPage(currentPage + 1);\r\n    };\r\n\r\n    const renderItem = ({ item }: RenderPokemon) => {\r\n        return <PokedexItem pokemon={item} />;\r\n    };\r\n\r\n    const renderLoader = () => {\r\n        return isLoading ? (\r\n            <View style={styles.loader}>\r\n                <ActivityIndicator size=\"large\" color=\"#aaa\" />\r\n            </View>\r\n        ) : null;\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Header\r\n                title=\"Dexmon\"\r\n                showBackButton={false}\r\n                showSearchButton={true}\r\n            />\r\n            <FlatList\r\n                data={updatedPokemonList}\r\n                initialNumToRender={20}\r\n                renderItem={renderItem}\r\n                keyExtractor={(item) => String(item.name)}\r\n                ListFooterComponent={renderLoader}\r\n                onEndReached={loadMoreItems}\r\n                onEndReachedThreshold={0.2}\r\n                removeClippedSubviews={true}\r\n                maxToRenderPerBatch={20}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n\r\nconst styles = EStyleSheet.create({\r\n    container: {\r\n        backgroundColor: \"$mainDark\",\r\n        flex: 1,\r\n    },\r\n    loader: {\r\n        marginVertical: 16,\r\n        alignItems: \"center\",\r\n    },\r\n});\r\n","import { View, Text } from \"react-native\";\r\nimport React from \"react\";\r\nimport EStyleSheet from \"react-native-extended-stylesheet\";\r\n\r\ninterface FlavorTextProps {\r\n    text: string;\r\n}\r\n\r\nconst FlavorTextBox = ({ text }: FlavorTextProps) => {\r\n    return (\r\n        <View style={styles.mainContainer}>\r\n            <View style={styles.headerContainer}>\r\n                <Text style={styles.headerText}>Flavor Text</Text>\r\n            </View>\r\n            <View style={styles.containerBody}>\r\n                <Text style={styles.containerText}>\r\n                    {text.split(\"\\n\").join(\" \").replace(\"\\f\", \" \")}\r\n                </Text>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default FlavorTextBox;\r\n\r\nconst styles = EStyleSheet.create({\r\n    mainContainer: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        marginHorizontal: 5,\r\n        borderWidth: 1,\r\n        borderColor: \"rgba(255,255,255,0.50)\",\r\n        borderRadius: 3,\r\n        width: \"100%\",\r\n    },\r\n    headerContainer: {\r\n        backgroundColor: \"$mainAccent\",\r\n        width: \"100%\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        paddingVertical: 3,\r\n    },\r\n    headerText: {\r\n        fontWeight: \"bold\",\r\n        color: \"$mainText\",\r\n    },\r\n    containerBody: {\r\n        flex: 1,\r\n        width: \"100%\",\r\n        paddingHorizontal: 10,\r\n        justifyContent: \"center\",\r\n        backgroundColor: \"rgba(255,255,255,0.10)\",\r\n    },\r\n    containerText: {\r\n        color: \"$mainText\",\r\n        textAlign: \"center\",\r\n    },\r\n});\r\n","import { View, Text, Image, TouchableOpacity, Dimensions } from \"react-native\";\r\nimport React, { useLayoutEffect, useState } from \"react\";\r\nimport { capitalize } from \"../typescript/functions\";\r\nimport axios from \"axios\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\nimport EStyleSheet from \"react-native-extended-stylesheet\";\r\n\r\ninterface EvoItems {\r\n    item: {\r\n        name: string;\r\n        url: string;\r\n    };\r\n}\r\n\r\nexport interface PokemonResponse {\r\n    name: string;\r\n}\r\n\r\nexport type RootStackParamList = {\r\n    Poke: {\r\n        pokemon: PokemonResponse;\r\n    };\r\n};\r\n\r\nconst EvolutionChainItem = ({ item }: EvoItems) => {\r\n    const [imageUrl, setImageUrl] = useState(\"\");\r\n\r\n    const screenWidth = Dimensions.get(\"screen\").width;\r\n\r\n    const navigation =\r\n        useNavigation<NativeStackNavigationProp<RootStackParamList, \"Poke\">>();\r\n\r\n    useLayoutEffect(() => {\r\n        axios\r\n            .get(`https://pokeapi.co/api/v2/pokemon/${item.name}/`)\r\n            .then((data) => setImageUrl(data.data.sprites.front_default));\r\n    }, []);\r\n\r\n    return imageUrl !== \"\" ? (\r\n        <TouchableOpacity\r\n            style={[\r\n                styles.mainContainer,\r\n                { minWidth: Math.min(screenWidth / 10, 85) },\r\n            ]}\r\n            onPress={() =>\r\n                navigation.push(\"Poke\", { pokemon: { name: item.name } })\r\n            }\r\n        >\r\n            <Image style={styles.image} source={{ uri: imageUrl }} />\r\n            <Text style={styles.imageCaption}>{capitalize(item.name)}</Text>\r\n        </TouchableOpacity>\r\n    ) : (\r\n        <View></View>\r\n    );\r\n};\r\n\r\nexport default EvolutionChainItem;\r\n\r\nconst styles = EStyleSheet.create({\r\n    mainContainer: {\r\n        alignItems: \"center\",\r\n        marginHorizontal: 5,\r\n        flex: 1,\r\n        padding: 10,\r\n    },\r\n    image: {\r\n        width: 75,\r\n        height: 75,\r\n    },\r\n    imageCaption: {\r\n        color: \"$mainText\",\r\n        fontSize: 12,\r\n    },\r\n});\r\n","import React, { useMemo } from \"react\";\r\nimport { View, Text, FlatList } from \"react-native\";\r\nimport EvolutionChainItem from \"./EvolutionChainItem\";\r\nimport EStyleSheet from \"react-native-extended-stylesheet\";\r\n\r\ninterface Props {\r\n    chain: {\r\n        species: {\r\n            name: string;\r\n            url: string;\r\n        };\r\n        image_url: string;\r\n        evolves_to: Array<{\r\n            species: {\r\n                name: string;\r\n                url: string;\r\n            };\r\n            image_url: string;\r\n            evolves_to: Array<{\r\n                species: {\r\n                    name: string;\r\n                    url: string;\r\n                };\r\n                image_url: string;\r\n                evolves_to: Array<{\r\n                    species: {\r\n                        name: string;\r\n                        url: string;\r\n                    };\r\n                    image_url: string;\r\n                    evolves_to: [];\r\n                }>;\r\n            }>;\r\n        }>;\r\n    };\r\n}\r\n\r\nconst EvolutionChain: React.FC<Props> = ({ chain }) => {\r\n    const data = useMemo(() => {\r\n        const flattenChain = (\r\n            chain: Props[\"chain\"][\"evolves_to\"],\r\n            level: number\r\n        ): Array<{\r\n            species: {\r\n                name: string;\r\n                url: string;\r\n            };\r\n            evolves_to: Array<any>;\r\n            image_url: string;\r\n            level: number;\r\n        }> => {\r\n            return chain.flatMap((evolution) => [\r\n                { ...evolution, level },\r\n                ...flattenChain(evolution.evolves_to, level + 1),\r\n            ]);\r\n        };\r\n\r\n        return [{ ...chain, level: 0 }, ...flattenChain(chain.evolves_to, 1)];\r\n    }, [chain.evolves_to]);\r\n\r\n    return (\r\n        <View style={styles.mainContainer}>\r\n            <View style={styles.headerContainer}>\r\n                <Text style={styles.headerText}>Evolution Chain</Text>\r\n            </View>\r\n            <View style={styles.containerBody}>\r\n                <FlatList\r\n                    data={data}\r\n                    renderItem={({ item, index }) => {\r\n                        const nextItem = data[index + 1];\r\n                        return (\r\n                            <View style={styles.chainItemWrapper}>\r\n                                <EvolutionChainItem item={item.species} />\r\n                                {nextItem && nextItem.level === item.level && (\r\n                                    <Text style={styles.orText}>OR</Text>\r\n                                )}\r\n                                {nextItem && nextItem.level > item.level && (\r\n                                    <View style={styles.arrow} />\r\n                                )}\r\n                            </View>\r\n                        );\r\n                    }}\r\n                    keyExtractor={(item) => item.species.name}\r\n                    horizontal\r\n                    showsHorizontalScrollIndicator={true}\r\n                />\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default EvolutionChain;\r\n\r\nconst styles = EStyleSheet.create({\r\n    mainContainer: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        marginHorizontal: 5,\r\n        borderWidth: 1,\r\n        borderColor: \"rgba(255,255,255,0.50)\",\r\n        borderRadius: 3,\r\n        width: \"100%\",\r\n    },\r\n    headerContainer: {\r\n        backgroundColor: \"$mainAccent\",\r\n        width: \"100%\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        paddingVertical: 3,\r\n    },\r\n    headerText: {\r\n        fontWeight: \"bold\",\r\n        color: \"$mainText\",\r\n    },\r\n    containerBody: {\r\n        flex: 1,\r\n        width: \"100%\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        backgroundColor: \"rgba(255,255,255,0.10)\",\r\n        overflow: \"hidden\",\r\n    },\r\n    chainItemWrapper: {\r\n        flex: 1,\r\n        height: \"100%\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-around\",\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n    },\r\n    orText: {\r\n        color: \"$mainText\",\r\n        fontSize: 20,\r\n    },\r\n    arrow: {\r\n        width: 15,\r\n        height: 15,\r\n        borderTopWidth: 2,\r\n        borderRightWidth: 2,\r\n        borderColor: \"$mainText\",\r\n        transform: [\r\n            {\r\n                rotate: \"45deg\",\r\n            },\r\n        ],\r\n    },\r\n});\r\n","import React from \"react\";\r\nimport { View, Text, StyleSheet } from \"react-native\";\r\nimport EStyleSheet from \"react-native-extended-stylesheet\";\r\n\r\ninterface Stats {\r\n    name: string;\r\n    value: number;\r\n}\r\n\r\ninterface Props {\r\n    stats: Stats[];\r\n    maxX: number;\r\n}\r\n\r\nconst BarChart = (props: Props) => {\r\n    const { stats, maxX } = props;\r\n\r\n    const statAbbrevs = {\r\n        hp: \"HP\",\r\n        attack: \"ATK\",\r\n        defense: \"DEF\",\r\n        \"special-attack\": \"SpA\",\r\n        \"special-defense\": \"SpD\",\r\n        speed: \"SPE\",\r\n    };\r\n\r\n    const statColors = {\r\n        hp: \"#FF5959\",\r\n        attack: \"#F5AC78\",\r\n        defense: \"#FAE078\",\r\n        \"special-attack\": \"#9DB7F5\",\r\n        \"special-defense\": \"#A7DB8D\",\r\n        speed: \"#FA92B2\",\r\n    };\r\n\r\n    return (\r\n        <View style={styles.chartContainer}>\r\n            <View style={styles.chartTitleContainer}>\r\n                <Text style={styles.chartTitleText}>Stats</Text>\r\n            </View>\r\n            <View style={styles.chartBody}>\r\n                {stats.map((stat, index) => (\r\n                    <View key={stat.name} style={styles.chartRowContainer}>\r\n                        <View style={styles.chartStatLabelContainer}>\r\n                            <Text style={styles.chartStatLabelText}>\r\n                                {stat.name.replace(\r\n                                    stat.name,\r\n                                    (m) =>\r\n                                        statAbbrevs[\r\n                                            m as keyof typeof statAbbrevs\r\n                                        ]\r\n                                )}\r\n                                :\r\n                            </Text>\r\n                        </View>\r\n\r\n                        <View style={styles.chartRowBody}>\r\n                            <View\r\n                                style={{\r\n                                    width:\r\n                                        Math.min(\r\n                                            (stat.value / maxX) * 100,\r\n                                            100\r\n                                        ) + \"%\",\r\n                                    height: 20,\r\n                                    backgroundColor: stat.name.replace(\r\n                                        stat.name,\r\n                                        (m) =>\r\n                                            statColors[\r\n                                                m as keyof typeof statColors\r\n                                            ]\r\n                                    ),\r\n                                }}\r\n                            >\r\n                                {stat.value >= 20 && (\r\n                                    <Text style={styles.textOnBar}>\r\n                                        {stat.value}\r\n                                    </Text>\r\n                                )}\r\n                            </View>\r\n                            {stat.value < 20 && (\r\n                                <Text style={styles.textBesideBar}>\r\n                                    {stat.value}\r\n                                </Text>\r\n                            )}\r\n                        </View>\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default BarChart;\r\n\r\nconst styles = EStyleSheet.create({\r\n    chartContainer: {\r\n        backgroundColor: \"rgba(255,255,255,0.10)\",\r\n        width: \"100%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        borderWidth: 1,\r\n        borderColor: \"rgba(255,255,255,0.50)\",\r\n        borderRadius: 3,\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n    },\r\n    chartTitleContainer: {\r\n        backgroundColor: \"$mainAccent\",\r\n        paddingVertical: 3,\r\n        width: \"100%\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    chartTitleText: {\r\n        fontWeight: \"bold\",\r\n        color: \"$mainText\",\r\n    },\r\n    chartBody: {\r\n        flex: 1,\r\n        paddingVertical: \"auto\",\r\n    },\r\n    chartRowContainer: {\r\n        flexDirection: \"row\",\r\n        paddingTop: 5,\r\n        paddingBottom: 5,\r\n        alignItems: \"center\",\r\n        borderTopColor: \"$mainText\",\r\n        borderTopWidth: 1,\r\n        paddingLeft: 5,\r\n        paddingRight: 5,\r\n    },\r\n    chartStatLabelContainer: {\r\n        width: 50,\r\n    },\r\n    chartStatLabelText: {\r\n        color: \"$mainText\",\r\n        marginRight: 10,\r\n    },\r\n    chartRowBody: {\r\n        flex: 1,\r\n        flexDirection: \"row\",\r\n    },\r\n    textOnBar: {\r\n        position: \"absolute\",\r\n        right: 10,\r\n        top: 0,\r\n        bottom: 0,\r\n        justifyContent: \"center\",\r\n        color: \"#16161d\",\r\n        fontWeight: \"bold\",\r\n    },\r\n    textBesideBar: {\r\n        marginLeft: 10,\r\n        color: \"$mainText\",\r\n        fontWeight: \"bold\",\r\n    },\r\n});\r\n","import { View, Text, Image, Dimensions, Platform } from \"react-native\";\r\nimport React from \"react\";\r\nimport EStyleSheet from \"react-native-extended-stylesheet\";\r\n\r\ninterface GridItemProps {\r\n    category: string;\r\n    value: string;\r\n    image: boolean;\r\n}\r\n\r\nconst GridItem = ({ category, value, image }: GridItemProps) => {\r\n    const screenWidth = Dimensions.get(\"screen\").width;\r\n    const gridRowMaxWidth = screenWidth * 0.9;\r\n\r\n    return (\r\n        <View\r\n            style={[\r\n                styles.mainContainer,\r\n                {\r\n                    minWidth:\r\n                        Platform.OS !== \"web\"\r\n                            ? Math.max(gridRowMaxWidth * 0.16 - 40, 120)\r\n                            : \"\",\r\n                    marginHorizontal: Platform.OS !== \"web\" ? 5 : \"\",\r\n                    maxWidth:\r\n                        Platform.OS !== \"web\"\r\n                            ? Math.max(gridRowMaxWidth * 0.16 - 35, 150)\r\n                            : \"\",\r\n                },\r\n            ]}\r\n        >\r\n            <View style={styles.headerContainer}>\r\n                <Text style={styles.headerText}>{category}</Text>\r\n            </View>\r\n            <View style={styles.containerBody}>\r\n                {image === true ? (\r\n                    <>\r\n                        <Image source={{ uri: value }} style={styles.image} />\r\n                    </>\r\n                ) : (\r\n                    <Text style={styles.bodyText}>{value}</Text>\r\n                )}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default GridItem;\r\n\r\nconst styles = EStyleSheet.create({\r\n    mainContainer: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        borderWidth: 1,\r\n        borderColor: \"rgba(255,255,255,0.50)\",\r\n        borderRadius: 3,\r\n    },\r\n    headerContainer: {\r\n        backgroundColor: \"$mainAccent\",\r\n        width: \"100%\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        paddingVertical: 3,\r\n    },\r\n    headerText: {\r\n        fontWeight: \"bold\",\r\n        color: \"$mainText\",\r\n    },\r\n    containerBody: {\r\n        flex: 1,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        backgroundColor: \"rgba(255,255,255,0.10)\",\r\n        width: \"100%\",\r\n    },\r\n    image: {\r\n        width: 48,\r\n        height: 48,\r\n    },\r\n    bodyText: {\r\n        color: \"$mainText\",\r\n        paddingHorizontal: 5,\r\n    },\r\n});\r\n","import React from \"react\";\r\nimport { View, Dimensions, Platform } from \"react-native\";\r\nimport { ScrollView } from \"react-native-gesture-handler\";\r\nimport { capitalize } from \"../typescript/functions\";\r\nimport GridItem from \"./GridItem\";\r\nimport EStyleSheet from \"react-native-extended-stylesheet\";\r\n\r\ntype UpdatedPoke = {\r\n    name: string;\r\n    url: string;\r\n    image_url: string;\r\n    id: number;\r\n    types: [\r\n        {\r\n            type: {\r\n                name: string;\r\n                url: string;\r\n            };\r\n        }\r\n    ];\r\n    stats: [\r\n        {\r\n            base_stat: number;\r\n            stat: {\r\n                name: string;\r\n                url: string;\r\n            };\r\n        }\r\n    ];\r\n    official_art: string;\r\n    classification: Array<{\r\n        genus: string;\r\n        language: {\r\n            name: string;\r\n            url: string;\r\n        };\r\n    }>;\r\n    flavor_text: Array<{\r\n        flavor_text: string;\r\n        language: {\r\n            name: string;\r\n            url: string;\r\n        };\r\n    }>;\r\n    height: number;\r\n    weight: number;\r\n};\r\n\r\ninterface RowProps {\r\n    pokemon: UpdatedPoke;\r\n}\r\n\r\nconst GridRow = ({ pokemon }: RowProps) => {\r\n    const screenWidth = Dimensions.get(\"screen\").width;\r\n    const gridRowMaxWidth = screenWidth * 0.9;\r\n\r\n    return (\r\n        <View style={styles.mainContainer}>\r\n            {Platform.OS !== \"web\" ? (\r\n                <ScrollView\r\n                    horizontal={true}\r\n                    contentContainerStyle={[\r\n                        styles.scrollView,\r\n                        { minWidth: gridRowMaxWidth },\r\n                    ]}\r\n                >\r\n                    <GridItem\r\n                        category={\"Classification\"}\r\n                        value={pokemon.classification[0].genus}\r\n                        image={false}\r\n                    />\r\n                    <GridItem\r\n                        category={\"Sprite\"}\r\n                        value={pokemon.image_url}\r\n                        image={true}\r\n                    />\r\n                    <GridItem\r\n                        category={\"Height\"}\r\n                        value={`${pokemon.height / 10} m`}\r\n                        image={false}\r\n                    />\r\n                    <GridItem\r\n                        category={\"Weight\"}\r\n                        value={`${pokemon.weight / 10} kg`}\r\n                        image={false}\r\n                    />\r\n                    <GridItem\r\n                        category={\"Type\"}\r\n                        value={pokemon.types\r\n                            .map((type) => type.type.name)\r\n                            .map((type) => capitalize(type))\r\n                            .join(\"\\n\")}\r\n                        image={false}\r\n                    />\r\n                </ScrollView>\r\n            ) : (\r\n                <View style={styles.webViewContainer}>\r\n                    <GridItem\r\n                        category={\"Classification\"}\r\n                        value={pokemon.classification[0].genus}\r\n                        image={false}\r\n                    />\r\n                    <View style={styles.webGaps} />\r\n                    <GridItem\r\n                        category={\"Sprite\"}\r\n                        value={pokemon.image_url}\r\n                        image={true}\r\n                    />\r\n                    <View style={styles.webGaps} />\r\n                    <GridItem\r\n                        category={\"Height\"}\r\n                        value={`${pokemon.height / 10} m`}\r\n                        image={false}\r\n                    />\r\n                    <View style={styles.webGaps} />\r\n                    <GridItem\r\n                        category={\"Weight\"}\r\n                        value={`${pokemon.weight / 10} kg`}\r\n                        image={false}\r\n                    />\r\n                    <View style={styles.webGaps} />\r\n                    <GridItem\r\n                        category={\"Type\"}\r\n                        value={pokemon.types\r\n                            .map((type) => type.type.name)\r\n                            .map((type) => capitalize(type))\r\n                            .join(\"\\n\")}\r\n                        image={false}\r\n                    />\r\n                </View>\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default GridRow;\r\n\r\nconst styles = EStyleSheet.create({\r\n    mainContainer: {\r\n        width: \"100%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n    },\r\n    scrollView: {\r\n        height: 100,\r\n    },\r\n    webViewContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        width: \"100%\",\r\n        height: 100,\r\n        justifyContent: \"space-between\",\r\n        minWidth: 600,\r\n    },\r\n    webGaps: {\r\n        marginHorizontal: 5,\r\n    },\r\n});\r\n","import { View, Text, Image } from \"react-native\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { PokemonResponse } from \"../components/EvolutionChainItem\";\r\nimport { useRoute, RouteProp } from \"@react-navigation/native\";\r\nimport axios from \"axios\";\r\nimport { ScrollView } from \"react-native-gesture-handler\";\r\nimport { capitalize } from \"../typescript/functions\";\r\nimport FlavorTextBox from \"../components/FlavorTextBox\";\r\nimport EvolutionChain from \"../components/EvolutionChain\";\r\nimport BarChart from \"../components/BarChartWrapper\";\r\nimport GridRow from \"../components/GridRow\";\r\nimport EStyleSheet from \"react-native-extended-stylesheet\";\r\nimport Header from \"../components/Header\";\r\n\r\nexport type RootStackParamList = {\r\n    Pokemon: {\r\n        pokemon: PokemonResponse;\r\n    };\r\n};\r\n\r\ninterface InitialPokemonObject {\r\n    name: string;\r\n    id: number;\r\n    image_url: string;\r\n    types: [\r\n        {\r\n            type: {\r\n                name: string;\r\n                url: string;\r\n            };\r\n        }\r\n    ];\r\n    stats: [\r\n        {\r\n            base_stat: number;\r\n            stat: {\r\n                name: string;\r\n                url: string;\r\n            };\r\n        }\r\n    ];\r\n    official_art: string;\r\n    height: number;\r\n    weight: number;\r\n}\r\n\r\ninterface FinalPokemonObject {\r\n    name: string;\r\n    image_url: string;\r\n    id: number;\r\n    url: string;\r\n    types: [\r\n        {\r\n            type: {\r\n                name: string;\r\n                url: string;\r\n            };\r\n        }\r\n    ];\r\n    stats: [\r\n        {\r\n            base_stat: number;\r\n            stat: {\r\n                name: string;\r\n                url: string;\r\n            };\r\n        }\r\n    ];\r\n    official_art: string;\r\n    classification: Array<{\r\n        genus: string;\r\n        language: {\r\n            name: string;\r\n            url: string;\r\n        };\r\n    }>;\r\n    flavor_text: Array<{\r\n        flavor_text: string;\r\n        language: {\r\n            name: string;\r\n            url: string;\r\n        };\r\n    }>;\r\n    height: number;\r\n    weight: number;\r\n    chain: {\r\n        species: {\r\n            name: string;\r\n            url: string;\r\n        };\r\n        image_url: string;\r\n        evolves_to: Array<{\r\n            species: {\r\n                name: string;\r\n                url: string;\r\n            };\r\n            image_url: string;\r\n            evolves_to: Array<{\r\n                species: {\r\n                    name: string;\r\n                    url: string;\r\n                };\r\n                image_url: string;\r\n                evolves_to: Array<{\r\n                    species: {\r\n                        name: string;\r\n                        url: string;\r\n                    };\r\n                    image_url: string;\r\n                    evolves_to: [];\r\n                }>;\r\n            }>;\r\n        }>;\r\n    };\r\n}\r\n\r\nconst JustNamePokemonScreen = () => {\r\n    const {\r\n        params: { pokemon },\r\n    } = useRoute<RouteProp<RootStackParamList, \"Pokemon\">>();\r\n\r\n    const [updatedPokemon, setUpdatedPokemon] =\r\n        useState<InitialPokemonObject>();\r\n    const [fullPokemonObj, setFullPokemonObj] = useState<FinalPokemonObject>();\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(`https://pokeapi.co/api/v2/pokemon/${pokemon.name}`)\r\n            .then((data) => {\r\n                const updatedPoke = {\r\n                    name: pokemon.name,\r\n                    height: data.data.height,\r\n                    weight: data.data.weight,\r\n                    types: data.data.types,\r\n                    official_art:\r\n                        data.data.sprites[\"other\"][\"official-artwork\"]\r\n                            .front_default,\r\n                    id: data.data.id,\r\n                    stats: data.data.stats,\r\n                    image_url: data.data.sprites.front_default,\r\n                };\r\n\r\n                setUpdatedPokemon(updatedPoke);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        updatedPokemon &&\r\n            axios\r\n                .get(\r\n                    `https://pokeapi.co/api/v2/pokemon-species/${updatedPokemon.id}`\r\n                )\r\n                .then((data) => {\r\n                    const updatePoke = {\r\n                        name: updatedPokemon.name,\r\n                        image_url: updatedPokemon.image_url,\r\n                        id: updatedPokemon.id,\r\n                        types: updatedPokemon.types,\r\n                        stats: updatedPokemon.stats,\r\n                        official_art: updatedPokemon.official_art,\r\n                        classification: data.data.genera,\r\n                        flavor_text: data.data.flavor_text_entries,\r\n                        height: updatedPokemon.height,\r\n                        weight: updatedPokemon.weight,\r\n                        chain: data.data.evolution_chain,\r\n                        url: \"\",\r\n                    };\r\n\r\n                    const filteredClassification =\r\n                        updatePoke.classification.filter(\r\n                            (classification: {\r\n                                genus: string;\r\n                                language: { name: string };\r\n                            }) => classification.language.name === \"en\"\r\n                        );\r\n\r\n                    const filteredText = updatePoke.flavor_text.filter(\r\n                        (text: {\r\n                            flavor_text: string;\r\n                            language: { name: string };\r\n                        }) => text.language.name === \"en\"\r\n                    );\r\n\r\n                    // Handle the promise returned by the Axios call\r\n                    axios.get(updatePoke.chain.url).then((data) => {\r\n                        // Update the evolution_chain property with the data returned by the Axios call\r\n                        updatePoke.chain = data.data.chain;\r\n\r\n                        // Create the newPoke object with the updated evolution_chain property\r\n                        const newPoke = {\r\n                            name: updatePoke.name,\r\n                            image_url: updatePoke.image_url,\r\n                            id: updatePoke.id,\r\n                            types: updatePoke.types,\r\n                            stats: updatePoke.stats,\r\n                            official_art: updatePoke.official_art,\r\n                            classification: filteredClassification,\r\n                            flavor_text: filteredText,\r\n                            height: updatePoke.height,\r\n                            weight: updatePoke.weight,\r\n                            chain: updatePoke.chain,\r\n                            url: updatePoke.url,\r\n                        };\r\n\r\n                        // Set the updatedPokemon state with the newPoke object\r\n                        setFullPokemonObj(newPoke);\r\n                    });\r\n                });\r\n    }, [updatedPokemon]);\r\n\r\n    return fullPokemonObj ? (\r\n        <View>\r\n            <Header\r\n                title=\"Pokemon\"\r\n                showBackButton={true}\r\n                showSearchButton={true}\r\n            />\r\n            <ScrollView style={styles.mainContainer}>\r\n                <View style={styles.container}>\r\n                    <View style={styles.header}>\r\n                        <Text style={styles.title}>\r\n                            {capitalize(fullPokemonObj.name)}\r\n                        </Text>\r\n                        <View style={styles.imageContainer}>\r\n                            <View style={styles.circle}>\r\n                                <View style={styles.innerCircle} />\r\n                                <Image\r\n                                    style={styles.image}\r\n                                    source={{\r\n                                        uri: fullPokemonObj.official_art,\r\n                                    }}\r\n                                    resizeMode=\"contain\"\r\n                                />\r\n                            </View>\r\n                        </View>\r\n                    </View>\r\n                    <View\r\n                        style={[\r\n                            styles.componentWrapper,\r\n                            {\r\n                                marginTop: 0,\r\n                                minHeight: 75,\r\n                                height: 100,\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <GridRow pokemon={fullPokemonObj} />\r\n                    </View>\r\n                    <View\r\n                        style={[\r\n                            styles.componentWrapper,\r\n                            {\r\n                                minHeight: 75,\r\n                                height: 100,\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <FlavorTextBox\r\n                            text={fullPokemonObj.flavor_text[0].flavor_text}\r\n                        />\r\n                    </View>\r\n                    <View style={styles.componentWrapper}>\r\n                        <EvolutionChain chain={fullPokemonObj.chain} />\r\n                    </View>\r\n                    <View style={styles.componentWrapper}>\r\n                        <BarChart\r\n                            stats={fullPokemonObj.stats.map((stat) => ({\r\n                                name: stat.stat.name,\r\n                                value: stat.base_stat,\r\n                            }))}\r\n                            maxX={200}\r\n                        />\r\n                    </View>\r\n                </View>\r\n            </ScrollView>\r\n        </View>\r\n    ) : (\r\n        <View></View>\r\n    );\r\n};\r\n\r\nconst styles = EStyleSheet.create({\r\n    mainContainer: {\r\n        backgroundColor: \"#383838\",\r\n        paddingVertical: 30,\r\n    },\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: \"$mainDark\",\r\n        paddingBottom: 180,\r\n    },\r\n    header: {\r\n        alignItems: \"center\",\r\n        paddingTop: 20,\r\n        paddingBottom: 20,\r\n        color: \"$mainText\",\r\n    },\r\n    title: {\r\n        fontSize: 24,\r\n        fontWeight: \"bold\",\r\n        color: \"$mainText\",\r\n    },\r\n    subtitleText: {\r\n        fontSize: 16,\r\n        color: \"$mainText\",\r\n    },\r\n    imageContainer: {\r\n        position: \"relative\",\r\n    },\r\n    image: {\r\n        width: 220,\r\n        height: 220,\r\n        alignSelf: \"start\",\r\n        marginLeft: 10,\r\n        marginTop: 10,\r\n    },\r\n    circle: {\r\n        width: 250,\r\n        height: 250,\r\n        borderRadius: 120,\r\n        overflow: \"hidden\",\r\n        position: \"relative\",\r\n    },\r\n    innerCircle: {\r\n        width: 200,\r\n        height: 200,\r\n        borderRadius: 100,\r\n        backgroundColor: \"rgba(255,255,255,0.50)\",\r\n        position: \"absolute\",\r\n        top: 20,\r\n        left: 20,\r\n        boxShadow: \"0 0 8px #333\",\r\n        shadowColor: \"#000\",\r\n        shadowOffset: { width: -2, height: -2 },\r\n        shadowOpacity: 0.3,\r\n        shadowRadius: 8,\r\n        elevation: 1,\r\n    },\r\n    body: {\r\n        padding: 20,\r\n        maxWidth: 1000,\r\n        width: 500,\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n    },\r\n    typesContainer: {\r\n        maxWidth: 500,\r\n        flex: 1,\r\n        flexDirection: \"row\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n    },\r\n    subtitle: {\r\n        fontSize: 18,\r\n        fontWeight: \"bold\",\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n        alignSelf: \"center\",\r\n    },\r\n    type: {\r\n        padding: 5,\r\n        margin: 5,\r\n        borderRadius: 10,\r\n        backgroundColor: \"#ccc\",\r\n    },\r\n    componentWrapper: {\r\n        width: \"90%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        marginTop: 50,\r\n        height: 215,\r\n    },\r\n});\r\n\r\nexport default JustNamePokemonScreen;\r\n","import {\r\n    View,\r\n    Text,\r\n    FlatList,\r\n    TextInput,\r\n    TouchableWithoutFeedback,\r\n    Keyboard,\r\n    Platform,\r\n} from \"react-native\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport pokeData from \"../data/PokemonData.json\";\r\nimport PokedexItem from \"../components/PokedexItem\";\r\nimport { MagnifyingGlassIcon } from \"react-native-heroicons/outline\";\r\nimport EStyleSheet from \"react-native-extended-stylesheet\";\r\nimport { ScrollView } from \"react-native-gesture-handler\";\r\n\r\ninterface BasicPokemonData {\r\n    name: string;\r\n    url: string;\r\n    image_url: string;\r\n}\r\n\r\ntype RenderPokemon = {\r\n    item: BasicPokemonData;\r\n};\r\n\r\nconst PokemonSearch = () => {\r\n    const [allPokemon] = useState<Array<BasicPokemonData>>(pokeData);\r\n\r\n    const [filteredPokemon, setFilteredPokemon] = useState<\r\n        Array<BasicPokemonData>\r\n    >([]);\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n    const [messageText, setMessageText] = useState(\r\n        \"Begin searching Pokemon by typing a name\"\r\n    );\r\n\r\n    const textInputRef = useRef<TextInput>(null);\r\n\r\n    const handlePress = () => {\r\n        if (Platform.OS !== \"web\") {\r\n            if (textInputRef.current && textInputRef.current.isFocused()) {\r\n                Keyboard.dismiss();\r\n            }\r\n        }\r\n    };\r\n\r\n    const [inputIsFocused, setInputIsFocused] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (searchQuery.length >= 2) {\r\n            const poke = allPokemon.filter((pkmn) => {\r\n                return pkmn.name\r\n                    .toLowerCase()\r\n                    .includes(searchQuery.toLowerCase());\r\n            });\r\n            if (poke.length === 0) {\r\n                setMessageText(\r\n                    `No Pokemon found with a name containing \"${searchQuery}\"`\r\n                );\r\n            } else {\r\n                setFilteredPokemon(poke);\r\n                setMessageText(\"\");\r\n            }\r\n        } else if (searchQuery === \"\") {\r\n            setFilteredPokemon([]);\r\n            setMessageText(\"Begin searching Pokemon by typing a name\");\r\n        }\r\n    }, [searchQuery]);\r\n\r\n    const renderItem = ({ item }: RenderPokemon) => {\r\n        return (\r\n            <PokedexItem\r\n                pokemon={{\r\n                    name: item.name,\r\n                    url: item.url,\r\n                    image_url: item.image_url,\r\n                    id: 1,\r\n                    types: [\r\n                        {\r\n                            type: {\r\n                                name: \"string\",\r\n                                url: \"string\",\r\n                            },\r\n                        },\r\n                    ],\r\n                    stats: [\r\n                        {\r\n                            base_stat: 1,\r\n                            stat: {\r\n                                name: \"string\",\r\n                                url: \"string\",\r\n                            },\r\n                        },\r\n                    ],\r\n                    official_art: \"string\",\r\n                    height: 1,\r\n                    weight: 1,\r\n                }}\r\n            />\r\n        );\r\n    };\r\n\r\n    return (\r\n        <TouchableWithoutFeedback onPress={handlePress}>\r\n            <View style={styles.mainContainer}>\r\n                <Header\r\n                    title=\"Search Pokemon\"\r\n                    showBackButton={true}\r\n                    showSearchButton={false}\r\n                />\r\n\r\n                <View style={styles.headerContainer}>\r\n                    <View style={styles.subHeaderContainer}>\r\n                        <MagnifyingGlassIcon color=\"#fff\" size={20} />\r\n                        <TextInput\r\n                            ref={textInputRef}\r\n                            placeholder=\"Search Pokemon by name\"\r\n                            keyboardType=\"default\"\r\n                            value={searchQuery}\r\n                            onChangeText={(val) => setSearchQuery(val)}\r\n                            style={styles.searchTextInput}\r\n                        />\r\n                    </View>\r\n                </View>\r\n\r\n                {messageText === \"\" ? (\r\n                    <FlatList\r\n                        data={filteredPokemon}\r\n                        initialNumToRender={20}\r\n                        renderItem={renderItem}\r\n                        keyExtractor={(item) => String(item.name)}\r\n                        removeClippedSubviews={true}\r\n                        maxToRenderPerBatch={20}\r\n                        contentContainerStyle={{ paddingBottom: 200 }}\r\n                    />\r\n                ) : (\r\n                    <View style={styles.messageTextContainer}>\r\n                        <Text style={styles.messageText}>{messageText}</Text>\r\n                    </View>\r\n                )}\r\n            </View>\r\n        </TouchableWithoutFeedback>\r\n    );\r\n};\r\n\r\nexport default PokemonSearch;\r\n\r\nconst styles = EStyleSheet.create({\r\n    mainContainer: {\r\n        backgroundColor: \"$mainDark\",\r\n        flex: 1,\r\n    },\r\n    headerContainer: {\r\n        backgroundColor: \"$mainAccent\",\r\n    },\r\n    subHeaderContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        padding: 3,\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-around\",\r\n        width: \"80%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        height: 50,\r\n    },\r\n    searchTextInput: {\r\n        color: \"$mainDark\",\r\n        flex: 1,\r\n        marginLeft: 8,\r\n        backgroundColor: \"rgba(255, 255, 255, 0.5)\",\r\n        padding: 8,\r\n        borderRadius: 3,\r\n        paddingLeft: 8,\r\n    },\r\n    messageTextContainer: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        marginTop: \"auto\",\r\n        marginBottom: \"auto\",\r\n        height: \"auto\",\r\n    },\r\n    messageText: {\r\n        color: \"rgba(255, 255, 255, 0.7)\",\r\n    },\r\n});\r\n","import { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport Home from \"./screens/Home\";\nimport EStyleSheet from \"react-native-extended-stylesheet\";\nimport JustNamePokemonScreen from \"./screens/PokemonScreen\";\nimport PokemonSearch from \"./screens/PokemonSearch\";\n\nconst Stack = createNativeStackNavigator();\n\nEStyleSheet.build({\n    $mainAccent: \"#42AD4A\",\n    $mainDark: \"#383838\",\n    $mainText: \"#F8F8FF\",\n});\n\nexport default function App() {\n    return (\n        <NavigationContainer>\n            <Stack.Navigator>\n                <Stack.Screen\n                    name=\"Home\"\n                    component={Home}\n                    options={{ headerShown: false }}\n                />\n                <Stack.Screen\n                    name=\"Poke\"\n                    component={JustNamePokemonScreen}\n                    options={{ headerShown: false }}\n                />\n                <Stack.Screen\n                    name=\"Search\"\n                    component={PokemonSearch}\n                    options={{ headerShown: false }}\n                />\n            </Stack.Navigator>\n        </NavigationContainer>\n    );\n}\n"],"sourceRoot":""}